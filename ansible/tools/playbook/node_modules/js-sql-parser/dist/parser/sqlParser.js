/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[22,23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V2=[23,25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V3=[25,26,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V4=[25,27,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V5=[25,28,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V6=[25,29,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V7=[25,30,31,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V8=[25,32,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$V9=[25,35,36,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,93],$Va=[1,62],$Vb=[1,32],$Vc=[1,33],$Vd=[1,53],$Ve=[1,60],$Vf=[1,61],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,66],$Vk=[1,67],$Vl=[1,44],$Vm=[1,59],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,36],$Vw=[5,6,56],$Vx=[5,6,33,56,151],$Vy=[1,75],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,76],$VD=[5,6,26,33,39,40,56,63,64,66,69,81,99,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$VE=[5,6,24,26,33,39,40,56,63,64,66,69,81,99,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$VF=[1,97],$VG=[1,95],$VH=[1,96],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[2,92],$VT=[5,6,24,26,33,35,39,40,56,63,64,66,69,71,73,81,83,84,85,86,87,88,89,90,91,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$VU=[5,6,24,26,33,35,39,40,56,63,64,66,69,71,73,81,83,84,85,86,87,88,89,90,91,93,95,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$VV=[1,104],$VW=[1,111],$VX=[2,53],$VY=[1,112],$VZ=[1,128],$V_=[1,124],$V$=[19,25,40,42,43,45,46,48,49,51,54,68,71,73,74,75,76,78,79,80,111],$V01=[1,159],$V11=[33,56],$V21=[2,48],$V31=[1,168],$V41=[1,166],$V51=[1,167],$V61=[2,186],$V71=[1,173],$V81=[1,174],$V91=[5,6,33,56,121,127,131,137,139,144,146,148,176],$Va1=[1,176],$Vb1=[1,179],$Vc1=[1,180],$Vd1=[1,181],$Ve1=[1,182],$Vf1=[2,163],$Vg1=[1,178],$Vh1=[5,6,26,33,56,81,121,127,131,137,139,144,146,148,158,159,161,162,167,171,173,174,176],$Vi1=[5,6,26,33,39,40,56,63,64,66,69,81,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$Vj1=[5,6,24,26,33,39,40,56,63,64,66,69,81,83,84,85,86,91,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$Vk1=[5,6,24,26,33,39,40,56,63,64,66,69,71,73,81,83,84,85,86,91,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$Vl1=[5,6,56,127,131,137,139,144,146,148],$Vm1=[1,215],$Vn1=[2,168],$Vo1=[164,167],$Vp1=[5,6,26,33,56,81,121,127,131,137,139,144,146,148,158,159,161,162,167,171,173,174,176,186,187,188],$Vq1=[2,188],$Vr1=[1,220],$Vs1=[5,6,56,131,137,139,144,146,148],$Vt1=[1,243],$Vu1=[1,251],$Vv1=[1,252],$Vw1=[1,253],$Vx1=[5,6,56,131,139,144,146,148],$Vy1=[1,272],$Vz1=[1,278],$VA1=[1,279],$VB1=[63,66,69],$VC1=[5,6,56,139,144,146,148],$VD1=[2,132],$VE1=[1,288],$VF1=[1,289],$VG1=[5,6,33,56,125,131,137,139,144,146,148],$VH1=[2,193],$VI1=[1,298],$VJ1=[54,146],$VK1=[5,6,56,144,146,148],$VL1=[5,6,56,146,148],$VM1=[1,321];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,";":6,"SELECT":7,"distinctOpt":8,"highPriorityOpt":9,"maxStateMentTimeOpt":10,"straightJoinOpt":11,"sqlSmallResultOpt":12,"sqlBigResultOpt":13,"sqlBufferResultOpt":14,"sqlCacheOpt":15,"sqlCalcFoundRowsOpt":16,"selectExprList":17,"selectDataSetOpt":18,"ALL":19,"DISTINCT":20,"DISTINCTROW":21,"HIGH_PRIORITY":22,"MAX_STATEMENT_TIME":23,"=":24,"NUMERIC":25,"STRAIGHT_JOIN":26,"SQL_SMALL_RESULT":27,"SQL_BIG_RESULT":28,"SQL_BUFFER_RESULT":29,"SQL_CACHE":30,"SQL_NO_CACHE":31,"SQL_CALC_FOUND_ROWS":32,",":33,"selectExpr":34,"*":35,"SELECT_EXPR_STAR":36,"expr":37,"selectExprAliasOpt":38,"AS":39,"IDENTIFIER":40,"string":41,"QUOTED_IDENTIFIER":42,"STRING":43,"number":44,"EXPONENT_NUMERIC":45,"HEX_NUMERIC":46,"boolean":47,"TRUE":48,"FALSE":49,"null":50,"NULL":51,"literal":52,"function_call":53,"(":54,"function_call_param_list":55,")":56,"function_call_param":57,"identifier":58,"DOT":59,"identifier_list":60,"case_expr_opt":61,"when_then_list":62,"WHEN":63,"THEN":64,"case_when_else":65,"ELSE":66,"case_when":67,"CASE":68,"END":69,"simple_expr_prefix":70,"+":71,"simple_expr":72,"-":73,"~":74,"!":75,"BINARY":76,"expr_list":77,"ROW":78,"EXISTS":79,"{":80,"}":81,"bit_expr":82,"|":83,"&":84,"<<":85,">>":86,"/":87,"DIV":88,"MOD":89,"%":90,"^":91,"not_opt":92,"NOT":93,"escape_opt":94,"ESCAPE":95,"predicate":96,"IN":97,"BETWEEN":98,"AND":99,"SOUNDS":100,"LIKE":101,"REGEXP":102,"comparison_operator":103,">=":104,">":105,"<=":106,"<":107,"<>":108,"!=":109,"sub_query_data_set_opt":110,"ANY":111,"boolean_primary":112,"IS":113,"boolean_extra":114,"UNKNOWN":115,"&&":116,"||":117,"OR":118,"XOR":119,"where_opt":120,"WHERE":121,"group_by_opt":122,"group_by":123,"roll_up_opt":124,"WITH":125,"ROLLUP":126,"GROUP_BY":127,"group_by_order_by_item_list":128,"order_by_opt":129,"order_by":130,"ORDER_BY":131,"group_by_order_by_item":132,"sort_opt":133,"ASC":134,"DESC":135,"having_opt":136,"HAVING":137,"limit":138,"LIMIT":139,"OFFSET":140,"limit_opt":141,"procedure_opt":142,"procedure":143,"PROCEDURE":144,"for_update_lock_in_share_mode_opt":145,"FOR":146,"UPDATE":147,"LOCK":148,"SHARE":149,"MODE":150,"FROM":151,"table_refrences":152,"partitionOpt":153,"escaped_table_reference":154,"table_reference":155,"OJ":156,"join_inner_cross":157,"INNER":158,"CROSS":159,"left_right":160,"LEFT":161,"RIGHT":162,"out_opt":163,"OUTER":164,"left_right_out_opt":165,"join_table":166,"JOIN":167,"table_factor":168,"join_condition":169,"on_join_condition":170,"NATURAL":171,"join_condition_opt":172,"ON":173,"USING":174,"partition_names":175,"PARTITION":176,"aliasOpt":177,"index_or_key":178,"INDEX":179,"KEY":180,"for_opt":181,"identifier_list_opt":182,"index_hint_list_opt":183,"index_hint_list":184,"index_hint":185,"USE":186,"IGNORE":187,"FORCE":188,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:";",7:"SELECT",19:"ALL",20:"DISTINCT",21:"DISTINCTROW",22:"HIGH_PRIORITY",23:"MAX_STATEMENT_TIME",24:"=",25:"NUMERIC",26:"STRAIGHT_JOIN",27:"SQL_SMALL_RESULT",28:"SQL_BIG_RESULT",29:"SQL_BUFFER_RESULT",30:"SQL_CACHE",31:"SQL_NO_CACHE",32:"SQL_CALC_FOUND_ROWS",33:",",35:"*",36:"SELECT_EXPR_STAR",39:"AS",40:"IDENTIFIER",42:"QUOTED_IDENTIFIER",43:"STRING",45:"EXPONENT_NUMERIC",46:"HEX_NUMERIC",48:"TRUE",49:"FALSE",51:"NULL",54:"(",56:")",59:"DOT",63:"WHEN",64:"THEN",66:"ELSE",68:"CASE",69:"END",71:"+",73:"-",74:"~",75:"!",76:"BINARY",78:"ROW",79:"EXISTS",80:"{",81:"}",83:"|",84:"&",85:"<<",86:">>",87:"/",88:"DIV",89:"MOD",90:"%",91:"^",93:"NOT",95:"ESCAPE",97:"IN",98:"BETWEEN",99:"AND",100:"SOUNDS",101:"LIKE",102:"REGEXP",104:">=",105:">",106:"<=",107:"<",108:"<>",109:"!=",111:"ANY",113:"IS",115:"UNKNOWN",116:"&&",117:"||",118:"OR",119:"XOR",121:"WHERE",125:"WITH",126:"ROLLUP",127:"GROUP_BY",131:"ORDER_BY",134:"ASC",135:"DESC",137:"HAVING",139:"LIMIT",140:"OFFSET",144:"PROCEDURE",146:"FOR",147:"UPDATE",148:"LOCK",149:"SHARE",150:"MODE",151:"FROM",156:"OJ",158:"INNER",159:"CROSS",161:"LEFT",162:"RIGHT",164:"OUTER",167:"JOIN",171:"NATURAL",173:"ON",174:"USING",176:"PARTITION",179:"INDEX",180:"KEY",186:"USE",187:"IGNORE",188:"FORCE"},
productions_: [0,[3,2],[3,3],[4,12],[8,1],[8,1],[8,1],[8,0],[9,1],[9,0],[10,3],[10,0],[11,1],[11,0],[12,1],[12,0],[13,1],[13,0],[14,1],[14,0],[15,0],[15,1],[15,1],[16,1],[16,0],[17,3],[17,1],[34,1],[34,1],[34,2],[38,0],[38,2],[38,1],[41,1],[41,1],[44,1],[44,1],[44,1],[47,1],[47,1],[50,1],[52,1],[52,1],[52,1],[52,1],[53,4],[55,3],[55,1],[57,0],[57,1],[57,1],[57,2],[57,1],[58,1],[58,3],[60,1],[60,3],[61,0],[61,1],[62,4],[62,5],[65,0],[65,2],[67,5],[70,2],[70,2],[70,2],[70,2],[70,2],[72,1],[72,1],[72,1],[72,1],[72,3],[72,4],[72,3],[72,4],[72,4],[72,1],[82,1],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[82,3],[92,0],[92,1],[94,0],[94,2],[96,1],[96,6],[96,6],[96,6],[96,4],[96,5],[96,4],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[110,1],[110,1],[112,1],[112,4],[112,3],[112,6],[114,1],[114,1],[37,1],[37,4],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[77,1],[77,3],[120,0],[120,2],[122,0],[122,1],[124,0],[124,2],[123,3],[129,0],[129,1],[130,3],[128,1],[128,3],[132,2],[133,0],[133,1],[133,1],[136,0],[136,2],[138,2],[138,4],[138,4],[141,0],[141,1],[142,0],[142,1],[143,2],[145,0],[145,2],[145,4],[18,0],[18,10],[152,1],[152,3],[154,1],[154,4],[157,0],[157,1],[157,1],[160,1],[160,1],[163,0],[163,1],[165,0],[165,2],[166,4],[166,5],[166,4],[166,6],[166,5],[172,0],[172,1],[170,2],[169,1],[169,4],[155,1],[155,1],[175,1],[175,3],[153,0],[153,4],[177,0],[177,2],[177,1],[178,1],[178,1],[181,0],[181,2],[181,2],[181,2],[182,0],[182,1],[183,0],[183,1],[184,1],[184,3],[185,6],[185,6],[185,6],[168,4],[168,4],[168,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {nodeType: 'Main', value: $$[$0-1]}; 
break;
case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: true}; 
break;
case 3:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 4: case 5: case 6: case 8: case 10: case 12: case 14: case 16: case 18: case 21: case 22: case 23: case 41: case 42: case 43: case 44: case 49: case 50: case 52: case 58: case 62: case 69: case 70: case 71: case 72: case 78: case 79: case 93: case 95: case 96: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 116: case 118: case 129: case 131: case 136: case 142: case 143: case 145: case 150: case 152: case 153: case 164: case 165: case 166: case 167: case 169: case 178: case 180: case 182: case 183: case 191: case 192: case 198: case 200:
 this.$ = $$[$0] 
break;
case 7: case 9: case 11: case 13: case 15: case 17: case 19: case 20: case 24: case 48: case 57: case 61: case 92: case 94: case 128: case 130: case 132: case 135: case 141: case 144: case 149: case 151: case 154: case 163: case 168: case 177: case 186: case 193: case 197: case 199:
 this.$ = null 
break;
case 25:
 $$[$0-2].value.push($$[$0]); 
break;
case 26:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 27: case 28: case 53:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 29:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 30: case 188:
 this.$ = {alias: null, hasAs: null} 
break;
case 31:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 32:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 33: case 34:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 35: case 36: case 37:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 38:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 39:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 40:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 45:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 46:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 47:
 this.$ = [$$[$0]]; 
break;
case 51:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 54:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 55:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 56: case 160:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 59:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 60:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 63:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 64: case 65: case 66: case 67: case 68:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 73:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 74:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 75:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 76:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 77:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 80:
 this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } 
break;
case 81:
 this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } 
break;
case 82:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 83:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 84:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 85:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 86:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 87:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 88:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 89:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 90:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 91:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 97:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 98:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 99:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 100:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 101:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 102:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 113:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 114:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 115:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 117:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 119:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 120:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 121: case 124:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 122: case 123:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 125:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 126:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 127: case 202:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 133:
 this.$ = true 
break;
case 134:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 137:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 138: case 184:
 this.$ = [ $$[$0] ] 
break;
case 139:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 140:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 146:
 this.$ = { type: 'Limit', value: [ $$[$0] ] } 
break;
case 147:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } 
break;
case 148:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 155:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 156:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 157:
 this.$ = {} 
break;
case 158:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 159:
 this.$ = { type: 'TableRefrences', value: [ $$[$0] ] } 
break;
case 161:
 this.$ = { type: 'TableRefrence', value: $$[$0] } 
break;
case 162:
 this.$ = { type: 'TableRefrence', hasOj: true, value: $$[$0-1] } 
break;
case 170:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 171:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 172:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 173:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 174:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 175:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 176:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 179:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 181:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 185:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 187:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 189:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 190:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 194: case 195: case 196:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 201:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 203:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 204:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 205:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 206:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 207:
 this.$ = { type: 'SubQuery', value: $$[$0-2], alias: $$[$0].alias, hasAs: $$[$0].hasAs } 
break;
case 208:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
}
},
table: [{3:1,4:2,7:$V0},{1:[3]},{5:[1,4],6:[1,5]},o($V1,[2,7],{8:6,19:[1,7],20:[1,8],21:[1,9]}),{1:[2,1]},{5:[1,10]},o($V2,[2,9],{9:11,22:[1,12]}),o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),{1:[2,2]},o($V3,[2,11],{10:13,23:[1,14]}),o($V2,[2,8]),o($V4,[2,13],{11:15,26:[1,16]}),{24:[1,17]},o($V5,[2,15],{12:18,27:[1,19]}),o($V4,[2,12]),{25:[1,20]},o($V6,[2,17],{13:21,28:[1,22]}),o($V5,[2,14]),o($V3,[2,10]),o($V7,[2,19],{14:23,29:[1,24]}),o($V6,[2,16]),o($V8,[2,20],{15:25,30:[1,26],31:[1,27]}),o($V7,[2,18]),o($V9,[2,24],{16:28,32:[1,29]}),o($V8,[2,21]),o($V8,[2,22]),{17:30,25:$Va,34:31,35:$Vb,36:$Vc,37:34,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($V9,[2,23]),o($Vw,[2,157],{18:68,33:[1,69],151:[1,70]}),o($Vx,[2,26]),o($Vx,[2,27]),o($Vx,[2,28]),o($Vx,[2,30],{38:71,39:[1,77],40:[1,78],99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),o($VD,[2,118],{103:80,24:[1,81],104:[1,82],105:[1,83],106:[1,84],107:[1,85],108:[1,86],109:[1,87],113:[1,79]}),{25:$Va,37:88,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($VE,[2,112]),o($VE,[2,96],{92:89,35:$VF,71:$VG,73:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,93:$VR,97:$VS,98:$VS,101:$VS,102:$VS,100:[1,90]}),o($VT,[2,79]),o($VU,[2,69]),o($VU,[2,70],{59:$VV}),o($VU,[2,71]),o($VU,[2,72]),{4:106,7:$V0,25:$Va,37:107,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:105,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{54:[1,108]},{54:[1,109]},{40:$VW,58:110},o($VU,[2,78]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o([5,6,24,26,33,35,39,40,56,59,63,64,66,69,71,73,81,83,84,85,86,87,88,89,90,91,93,95,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],$VX,{54:$VY}),{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:113,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:114,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:115,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:116,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:117,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},{25:$Va,37:119,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,61:118,63:[2,57],67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($VU,[2,33]),o($VU,[2,34]),o($VU,[2,35]),o($VU,[2,36]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($Vw,[2,3]),{25:$Va,34:120,35:$Vb,36:$Vc,37:34,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{40:$VW,54:$VZ,58:127,80:$V_,152:121,154:122,155:123,166:126,168:125},o($Vx,[2,29]),{25:$Va,37:129,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{25:$Va,37:130,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{25:$Va,37:131,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{25:$Va,37:132,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{25:$Va,37:133,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{40:[1,134]},o($Vx,[2,32]),o([48,49,51,115],$VS,{92:135,93:$VR}),{19:[1,138],25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,96:136,110:137,111:[1,139]},o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($VD,[2,120]),{97:[1,140],98:[1,141],101:[1,142],102:[1,143]},{101:[1,144]},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:145},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:146},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:147},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:148},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:149},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:150},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:151},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:152},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:153},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:154},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:155},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:156},o([48,49,51,97,98,101,102,115],[2,93]),{40:[1,157]},{33:$V01,56:[1,158]},{56:[1,160]},o($V11,[2,126],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),{25:$Va,37:107,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:161,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{4:162,7:$V0},{25:$Va,37:163,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,59:$VV,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o([5,6,25,26,33,39,40,42,43,45,46,48,49,51,54,56,59,68,71,73,74,75,76,78,79,80,81,93,121,127,131,137,139,144,146,148,158,159,161,162,167,171,173,174,176,186,187,188],$VX),o($V11,$V21,{112:35,96:37,82:38,72:39,52:40,58:41,53:42,70:43,67:48,41:49,44:50,47:51,50:52,55:164,57:165,37:169,20:$V31,25:$Va,35:$V41,36:$V51,40:$Vd,42:$Ve,43:$Vf,45:$Vg,46:$Vh,48:$Vi,49:$Vj,51:$Vk,54:$Vl,68:$Vm,71:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,93:$Vv}),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),{62:170,63:[1,171]},{63:[2,58],99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC},o($Vx,[2,25]),o([5,6,56,121,127,131,137,139,144,146,148],$V61,{153:172,33:$V71,176:$V81}),o($V91,[2,159]),o($V91,[2,161],{157:175,160:177,26:$Va1,158:$Vb1,159:$Vc1,161:$Vd1,162:$Ve1,167:$Vf1,171:$Vg1}),{156:[1,183]},o($Vh1,[2,182]),o($Vh1,[2,183]),o([5,6,26,33,39,40,56,81,121,127,131,137,139,144,146,148,158,159,161,162,167,171,173,174,186,187,188],$V61,{153:184,59:$VV,176:$V81}),{4:185,7:$V0,40:$VW,54:$VZ,58:127,80:$V_,152:186,154:122,155:123,166:126,168:125},o($VD,[2,121]),o($Vi1,[2,122],{99:$Vy,116:$Vz}),o($Vi1,[2,123],{99:$Vy,116:$Vz}),o($VD,[2,124]),o($Vi1,[2,125],{99:$Vy,116:$Vz}),o($Vx,[2,31]),{47:189,48:$Vi,49:$Vj,51:[1,188],114:187,115:[1,190]},o($VE,[2,114]),{54:[1,191]},{54:[2,110]},{54:[2,111]},{54:[1,192]},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:193},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:194,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:195},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:196},o([5,6,24,26,33,39,40,56,63,64,66,69,81,83,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],[2,80],{35:$VF,71:$VG,73:$VH,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ}),o([5,6,24,26,33,39,40,56,63,64,66,69,81,83,84,91,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],[2,81],{35:$VF,71:$VG,73:$VH,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP}),o($Vj1,[2,82],{35:$VF,71:$VG,73:$VH,87:$VM,88:$VN,89:$VO,90:$VP}),o($Vj1,[2,83],{35:$VF,71:$VG,73:$VH,87:$VM,88:$VN,89:$VO,90:$VP}),o($Vk1,[2,84],{35:$VF,87:$VM,88:$VN,89:$VO,90:$VP}),o($Vk1,[2,85],{35:$VF,87:$VM,88:$VN,89:$VO,90:$VP}),o($VT,[2,86]),o($VT,[2,87]),o($VT,[2,88]),o($VT,[2,89]),o($VT,[2,90]),o([5,6,24,26,33,39,40,56,63,64,66,69,81,83,91,93,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176],[2,91],{35:$VF,71:$VG,73:$VH,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP}),o([5,6,24,25,26,33,35,39,40,42,43,45,46,48,49,51,54,56,59,63,64,66,68,69,71,73,74,75,76,78,79,80,81,83,84,85,86,87,88,89,90,91,93,95,97,98,99,100,101,102,104,105,106,107,108,109,113,116,117,118,119,121,125,127,131,134,135,137,139,144,146,148,151,158,159,161,162,167,171,173,174,176,186,187,188],[2,54]),o($VU,[2,73]),{25:$Va,37:197,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($VU,[2,75]),{33:$V01,56:[1,198]},{56:[1,199]},{81:[1,200],99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC},{33:[1,202],56:[1,201]},o($V11,[2,47]),o($V11,[2,49]),o($V11,[2,50]),{25:$Va,37:203,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($V11,[2,52],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),{63:[1,205],65:204,66:[1,206],69:[2,61]},{25:$Va,37:207,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($Vl1,[2,128],{120:208,121:[1,209]}),{40:$VW,54:$VZ,58:127,80:$V_,154:210,155:123,166:126,168:125},{54:[1,211]},{167:[1,212]},{40:$VW,54:$VZ,58:127,168:213},{163:214,164:$Vm1,167:$Vn1},{160:217,161:$Vd1,162:$Ve1,165:216,167:[2,170]},{167:[2,164]},{167:[2,165]},o($Vo1,[2,166]),o($Vo1,[2,167]),{40:$VW,54:$VZ,58:127,155:218,166:126,168:125},o($Vp1,$Vq1,{177:219,58:221,39:$Vr1,40:$VW}),{56:[1,222]},{33:$V71,56:[1,223]},o($VD,[2,119]),o($VE,[2,113]),o($VD,[2,116]),o($VD,[2,117]),{4:224,7:$V0},{4:225,7:$V0,25:$Va,37:107,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,77:226,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{35:$VF,71:$VG,73:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,99:[1,227]},o($VE,[2,94],{94:228,95:[1,229]}),o($VE,[2,102],{35:$VF,71:$VG,73:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ}),o($VE,[2,100],{35:$VF,71:$VG,73:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ}),o($V11,[2,127],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),o($VU,[2,74]),o($VU,[2,76]),o($VU,[2,77]),o($VU,[2,45]),o($V11,$V21,{112:35,96:37,82:38,72:39,52:40,58:41,53:42,70:43,67:48,41:49,44:50,47:51,50:52,37:169,57:230,20:$V31,25:$Va,35:$V41,36:$V51,40:$Vd,42:$Ve,43:$Vf,45:$Vg,46:$Vh,48:$Vi,49:$Vj,51:$Vk,54:$Vl,68:$Vm,71:$Vn,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,93:$Vv}),o($V11,[2,51],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),{69:[1,231]},{25:$Va,37:232,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{25:$Va,37:233,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{64:[1,234],99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC},o($Vs1,[2,130],{122:235,123:236,127:[1,237]}),{25:$Va,37:238,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($V91,[2,160]),{40:$VW,58:240,175:239},{40:$VW,54:$VZ,58:127,168:241},{170:242,173:$Vt1},{167:[1,244]},{167:[2,169]},{167:[1,245]},{163:246,164:$Vm1,167:$Vn1},{26:$Va1,81:[1,247],157:175,158:$Vb1,159:$Vc1,160:177,161:$Vd1,162:$Ve1,167:$Vf1,171:$Vg1},o($Vh1,[2,199],{183:248,184:249,185:250,186:$Vu1,187:$Vv1,188:$Vw1}),{40:$VW,58:254},o($Vp1,[2,190],{59:$VV}),o($Vh1,$Vq1,{58:221,177:255,39:$Vr1,40:$VW}),o($Vh1,[2,208]),{56:[1,256]},{56:[1,257]},{33:$V01,56:[1,258]},{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,96:259},o($VE,[2,101]),{25:$Va,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:260,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu},o($V11,[2,46]),o($VU,[2,63]),{64:[1,261],99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC},{69:[2,62],99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC},{25:$Va,37:262,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($Vx1,[2,144],{136:263,137:[1,264]}),o($Vs1,[2,131]),{25:$Va,37:267,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35,128:265,132:266},o($Vl1,[2,129],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),{33:[1,269],56:[1,268]},o($V11,[2,184],{59:$VV}),o([5,6,26,33,56,81,121,127,131,137,139,144,146,148,158,159,161,162,167,171,176],[2,172],{169:270,170:271,173:$Vt1,174:$Vy1}),o($Vh1,[2,174]),{25:$Va,37:273,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},{40:$VW,54:$VZ,58:127,155:274,166:126,168:125},{40:$VW,54:$VZ,58:127,168:275},{167:[2,171]},o($V91,[2,162]),o($Vh1,[2,206]),o($Vh1,[2,200]),o($Vh1,[2,201]),{178:277,179:$Vz1,180:$VA1},{178:280,179:$Vz1,180:$VA1},{178:281,179:$Vz1,180:$VA1},o($Vp1,[2,189],{59:$VV}),o($Vh1,[2,207]),o($VE,[2,115]),o($VE,[2,97]),o($VE,[2,98]),o($VE,[2,99]),o($VE,[2,95]),{25:$Va,37:282,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($VB1,[2,59],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),o($VC1,[2,135],{129:283,130:284,131:[1,285]}),{25:$Va,37:286,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35},o($Vs1,$VD1,{124:287,33:$VE1,125:$VF1}),o($VG1,[2,138]),o($VG1,[2,141],{133:290,99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC,134:[1,291],135:[1,292]}),o([5,6,26,33,39,40,56,81,121,127,131,137,139,144,146,148,158,159,161,162,167,171,173,174,176,186,187,188],[2,187]),{40:$VW,58:293},o($Vh1,[2,173]),o($Vh1,[2,180]),{54:[1,294]},o($Vh1,[2,179],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),{26:$Va1,157:175,158:$Vb1,159:$Vc1,160:177,161:$Vd1,162:$Ve1,167:$Vf1,169:295,170:271,171:$Vg1,173:$Vt1,174:$Vy1},o($Vh1,[2,176]),{185:296,186:$Vu1,187:$Vv1,188:$Vw1},{54:$VH1,146:$VI1,181:297},o($VJ1,[2,191]),o($VJ1,[2,192]),{54:$VH1,146:$VI1,181:299},{54:$VH1,146:$VI1,181:300},o($VB1,[2,60],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),o($VK1,[2,149],{141:301,138:302,139:[1,303]}),o($VC1,[2,136]),{25:$Va,37:267,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35,128:304,132:266},o($Vx1,[2,145],{99:$Vy,116:$Vz,117:$VA,118:$VB,119:$VC}),o($Vs1,[2,134]),{25:$Va,37:267,40:$Vd,41:49,42:$Ve,43:$Vf,44:50,45:$Vg,46:$Vh,47:51,48:$Vi,49:$Vj,50:52,51:$Vk,52:40,53:42,54:$Vl,58:41,67:48,68:$Vm,70:43,71:$Vn,72:39,73:$Vo,74:$Vp,75:$Vq,76:$Vr,78:$Vs,79:$Vt,80:$Vu,82:38,93:$Vv,96:37,112:35,132:305},{126:[1,306]},o($VG1,[2,140]),o($VG1,[2,142]),o($VG1,[2,143]),o($V11,[2,185],{59:$VV}),{40:$VW,58:308,60:307},o($Vh1,[2,175]),o($Vh1,[2,202]),{54:[1,309]},{127:[1,312],131:[1,311],167:[1,310]},{54:[1,313]},{54:[1,314]},o($VL1,[2,151],{142:315,143:316,144:[1,317]}),o($VK1,[2,150]),{25:[1,318]},o($VC1,$VD1,{124:319,33:$VE1,125:$VF1}),o($VG1,[2,139]),o($Vs1,[2,133]),{33:$VM1,56:[1,320]},o($V11,[2,55],{59:$VV}),{40:$VW,56:[2,197],58:308,60:323,182:322},{54:[2,194]},{54:[2,195]},{54:[2,196]},{40:$VW,58:308,60:324},{40:$VW,58:308,60:325},o($Vw,[2,154],{145:326,146:[1,327],148:[1,328]}),o($VL1,[2,152]),{40:[1,330],53:329},o($VK1,[2,146],{33:[1,331],140:[1,332]}),o($VC1,[2,137]),o($Vh1,[2,181]),{40:$VW,58:333},{56:[1,334]},{33:$VM1,56:[2,198]},{33:$VM1,56:[1,335]},{33:$VM1,56:[1,336]},o($Vw,[2,158]),{147:[1,337]},{97:[1,338]},o($VL1,[2,153]),{54:$VY},{25:[1,339]},{25:[1,340]},o($V11,[2,56],{59:$VV}),o($Vh1,[2,203]),o($Vh1,[2,204]),o($Vh1,[2,205]),o($Vw,[2,155]),{149:[1,341]},o($VK1,[2,147]),o($VK1,[2,148]),{150:[1,342]},o($Vw,[2,156])],
defaultActions: {4:[2,1],10:[2,2],138:[2,110],139:[2,111],179:[2,164],180:[2,165],215:[2,169],246:[2,171],310:[2,194],311:[2,195],312:[2,196]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 40
break;
case 5:return 40
break;
case 6:return 40
break;
case 7:return 7
break;
case 8:return 19
break;
case 9:return 111
break;
case 10:return 20
break;
case 11:return 21
break;
case 12:return 22
break;
case 13:return 23
break;
case 14:return 26
break;
case 15:return 27
break;
case 16:return 28
break;
case 17:return 29
break;
case 18:return 30
break;
case 19:return 31
break;
case 20:return 32
break;
case 21:return 36
break;
case 22:return 39
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 51
break;
case 26:return 'COLLATE'
break;
case 27:return 76
break;
case 28:return 78
break;
case 29:return 79
break;
case 30:return 68
break;
case 31:return 63
break;
case 32:return 64
break;
case 33:return 66
break;
case 34:return 69
break;
case 35:return 88
break;
case 36:return 89
break;
case 37:return 93
break;
case 38:return 98
break;
case 39:return 97
break;
case 40:return 100
break;
case 41:return 101
break;
case 42:return 95
break;
case 43:return 102
break;
case 44:return 113
break;
case 45:return 115
break;
case 46:return 99
break;
case 47:return 118
break;
case 48:return 119
break;
case 49:return 151
break;
case 50:return 176
break;
case 51:return 186
break;
case 52:return 179
break;
case 53:return 180
break;
case 54:return 146
break;
case 55:return 167
break;
case 56:return 131
break;
case 57:return 127
break;
case 58:return 187
break;
case 59:return 188
break;
case 60:return 158
break;
case 61:return 159
break;
case 62:return 173
break;
case 63:return 174
break;
case 64:return 161
break;
case 65:return 162
break;
case 66:return 164
break;
case 67:return 171
break;
case 68:return 121
break;
case 69:return 134
break;
case 70:return 135
break;
case 71:return 125
break;
case 72:return 126
break;
case 73:return 137
break;
case 74:return 140
break;
case 75:return 144
break;
case 76:return 147
break;
case 77:return 148
break;
case 78:return 149
break;
case 79:return 150
break;
case 80:return 156
break;
case 81:return 139
break;
case 82:return 33
break;
case 83:return 24
break;
case 84:return 54
break;
case 85:return 56
break;
case 86:return 74
break;
case 87:return 109
break;
case 88:return 75
break;
case 89:return 83
break;
case 90:return 84
break;
case 91:return 71
break;
case 92:return 73
break;
case 93:return 35
break;
case 94:return 87
break;
case 95:return 90
break;
case 96:return 91
break;
case 97:return 86
break;
case 98:return 104
break;
case 99:return 105
break;
case 100:return 85
break;
case 101:return '<=>'
break;
case 102:return 106
break;
case 103:return 108
break;
case 104:return 107
break;
case 105:return 80
break;
case 106:return 81
break;
case 107:return 6
break;
case 108:return 43
break;
case 109:return 43
break;
case 110:return 46
break;
case 111:return 25
break;
case 112:return 45
break;
case 113:return 40
break;
case 114:return 59
break;
case 115:return 42
break;
case 116:return 5
break;
case 117:return 'INVALID'
break;
}
},
rules: [/^(?:[\/][*](.|\n)*?[*][\/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:['"][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();if (!sqlParser) {
  sqlParser = {};
}

function Sql() {
  this.buffer = '';
}

sqlParser.stringify = function (ast) {
  var sql = new Sql();
  sql.travelMain(ast);
  return sql.buffer;
}

Sql.prototype.travel = function (ast) {
  if (!ast) return;

  if (typeof ast === 'string') {
    return this.append(ast);
  }

  var processor = this['travel' + ast.type];
  processor.call(this, ast);
}

var noSuffixFlag = false;
Sql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += keyword.toUpperCase();
  } else {
    this.buffer += ' ' + keyword.toUpperCase();
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
}
Sql.prototype.append = function(word, noPrefix, noSuffix) {
  if (noSuffixFlag) {
    noPrefix = true;
    noSuffixFlag = false;
  }
  if (noPrefix) {
    this.buffer += word;
  } else {
    this.buffer += ' ' + word;
  }

  if (noSuffix) {
    noSuffixFlag = true;
  }
}
Sql.prototype.travelMain = function(ast) {
  this.travelSelect(ast.value);
  if (ast.hasSemicolon) {
    this.append(';', true);
  }
}
Sql.prototype.travelSelect = function(ast) {
  this.appendKeyword('select', true);
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  if (ast.highPriorityOpt) {
    this.appendKeyword(ast.highPriorityOpt);
  }
  if (ast.maxStateMentTimeOpt) {
    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);
  }
  if (ast.straightJoinOpt) {
    this.appendKeyword(ast.straightJoinOpt);
  }
  if (ast.sqlSmallResultOpt) {
    this.appendKeyword(ast.sqlSmallResultOpt);
  }
  if (ast.sqlBigResultOpt) {
    this.appendKeyword(ast.sqlBigResultOpt);
  }
  if (ast.sqlBufferResultOpt) {
    this.appendKeyword(ast.sqlBufferResultOpt);
  }
  if (ast.sqlCacheOpt) {
    this.appendKeyword(ast.sqlCacheOpt);
  }
  if (ast.sqlCalcFoundRowsOpt) {
    this.appendKeyword(ast.sqlCalcFoundRowsOpt);
  }
  if (ast.selectItems) {
    this.travelSelectExpr(ast.selectItems);
  }
  if (ast.from) {
    this.appendKeyword('from');
    this.travel(ast.from);
  }
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.where) {
    this.appendKeyword('where');
    this.travel(ast.where);
  }
  if (ast.groupBy) {
    this.travel(ast.groupBy);
  }
  if (ast.having) {
    this.travel(ast.having);
  }
  if (ast.orderBy) {
    this.travel(ast.orderBy);
  }
  if (ast.limit) {
    this.travel(ast.limit);
  }
  if (ast.procedure) {
    this.appendKeyword('procedure');
    this.travel(ast.procedure);
  }
  if (ast.updateLockMode) {
    this.appendKeyword(ast.updateLockMode);
  }
}
Sql.prototype.travelSelectExpr = function (ast) {
  var exprList = ast.value;
  for (var i = 0; i < exprList.length; i++) {
    if (typeof ast === 'string') {
      this.append(exprList[i]);
    } else {
      this.travel(exprList[i]);
      if (exprList[i].alias) {
        if (exprList[i].hasAs) {
          this.appendKeyword('as');
        }
        this.travel(exprList[i].alias);
      }
    }
    if (i !== exprList.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelIsExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('in');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.append(ast.right);
}
Sql.prototype.travelNotExpression = function (ast) {
  this.appendKeyword('not');
  this.travel(ast.value);
}
Sql.prototype.travelOrExpression =
Sql.prototype.travelAndExpression =
Sql.prototype.travelXORExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelNull =
Sql.prototype.travelBoolean =
Sql.prototype.travelBooleanExtra = function (ast) {
  this.appendKeyword(ast.value);
}
Sql.prototype.travelNumber = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelString = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelFunctionCall = function (ast) {
  this.append(ast.name);
  this.append('(', true, true);
  var params = ast.params;
  for (var i = 0; i < params.length; i++) {
    var param = params[i];
    this.travel(param);
    if (i !== params.length -1) {
      this.append(',', true);
    }
  }
  this.append(')', true);
}
Sql.prototype.travelFunctionCallParam = function (ast) {
  if (ast.distinctOpt) {
    this.appendKeyword(ast.distinctOpt);
  }
  this.travel(ast.value);
}
Sql.prototype.travelIdentifier = function (ast) {
  this.append(ast.value);
}
Sql.prototype.travelIdentifierList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length -1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelWhenThenList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.appendKeyword('when');
    this.travel(list[i].when);
    this.appendKeyword('then');
    this.travel(list[i].then);
  }
}
Sql.prototype.travelCaseWhen = function (ast) {
  this.appendKeyword('case');
  if (ast.caseExprOpt) {
    this.travel(ast.caseExprOpt);
  }
  this.travel(ast.whenThenList);
  if (ast.else) {
    this.appendKeyword('else');
    this.travel(ast.else);
  }
  this.appendKeyword('end');
}
Sql.prototype.travelPrefix = function (ast) {
  this.appendKeyword(ast.prefix);
  this.travel(ast.value);
}
Sql.prototype.travelSimpleExprParentheses = function (ast) {
  if (ast.hasRow) {
    this.appendKeyword('row');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
}
Sql.prototype.travelSubQuery = function (ast) {
  if (ast.hasExists) {
    this.appendKeyword('exists');
  }
  this.append('(', false, true);
  this.travel(ast.value);
  this.append(')', true);
}
Sql.prototype.travelIdentifierExpr = function (ast) {
  this.append('{');
  this.travel(ast.identifier);
  this.travel(ast.value);
  this.append('}');
}
Sql.prototype.travelBitExpression = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelInSubQueryPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelInExpressionListPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('in');
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelBetweenPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('between');
  this.travel(ast.right.left);
  this.appendKeyword('and');
  this.travel(ast.right.right);
}
Sql.prototype.travelSoundsLikePredicate = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('sounds');
  this.appendKeyword('like');
  this.travel(ast.right);
}
Sql.prototype.travelLikePredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('like');
  this.travel(ast.right);
  if (ast.escape) {
    this.appendKeyword('escape')
    this.travel(ast.escape);
  }
}
Sql.prototype.travelRegexpPredicate = function (ast) {
  this.travel(ast.left);
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('regexp');
  this.travel(ast.right);
}
Sql.prototype.travelIsNullBooleanPrimary = function (ast) {
  this.travel(ast.value);
  this.appendKeyword('is');
  if (ast.hasNot) {
    this.appendKeyword('not');
  }
  this.appendKeyword('null');
}
Sql.prototype.travelComparisonBooleanPrimary = function (ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.travel(ast.right);
}
Sql.prototype.travelComparisonSubQueryBooleanPrimary = function (ast) {
  this.travel(ast.left);
  this.append(ast.operator);
  this.appendKeyword(ast.subQueryOpt);
  this.append('(', false, true);
  this.travel(ast.right);
  this.append(')');
}
Sql.prototype.travelExpressionList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelGroupBy = function (ast) {
  this.appendKeyword('group by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelOrderBy = function (ast) {
  this.appendKeyword('order by');
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.rollUp) {
    this.appendKeyword('with rollup');
  }
}
Sql.prototype.travelGroupByOrderByItem = function (ast) {
  this.travel(ast.value);
  if (ast.sortOpt) {
    this.appendKeyword(ast.sortOpt);
  }
}
Sql.prototype.travelLimit = function (ast) {
  this.appendKeyword('limit');
  var list = ast.value;
  if (list.length === 1) {
    this.append(list[0]);
  } else if (list.length === 2) {
    if (ast.offsetMode) {
      this.append(list[1]);
      this.append('offset');
      this.append(list[0]);
    } else {
      this.append(list[0]);
      this.append(',', true);
      this.append(list[1]);
    }
  }
}
Sql.prototype.travelTableRefrences = function (ast) {
  var list = ast.value;
  if (ast.TableRefrences) {
    this.append('(', false, true);
  }
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  if (ast.TableRefrences) {
    this.append(')');
  }
}
Sql.prototype.travelTableRefrence = function (ast) {
  if (ast.hasOj) {
    this.append('{');
    this.appendKeyword('oj');
    this.travel(ast.value);
    this.append('}');
  } else {
    this.travel(ast.value);
  }
}
Sql.prototype.travelInnerCrossJoinTable = function (ast) {
  this.travel(ast.left);
  if (ast.innerCrossOpt) {
    this.appendKeyword(ast.innerCrossOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  if (ast.condition) {
    this.travel(ast.condition);
  }
}
Sql.prototype.travelStraightJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('straight_join');
  this.travel(ast.right);
  this.travel(ast.condition);
}
Sql.prototype.travelLeftRightJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword(ast.leftRight);
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
  this.travel(ast.condition);
}
Sql.prototype.travelNaturalJoinTable = function (ast) {
  this.travel(ast.left);
  this.appendKeyword('natural');
  if (ast.leftRight) {
    this.appendKeyword(ast.leftRight);
  }
  if (ast.outOpt) {
    this.appendKeyword(ast.outOpt);
  }
  this.appendKeyword('join');
  this.travel(ast.right);
}
Sql.prototype.travelOnJoinCondition = function (ast) {
  this.appendKeyword('on');
  this.travel(ast.value);
}
Sql.prototype.travelUsingJoinCondition = function (ast) {
  this.appendKeyword('using');
  this.appendKeyword('(', false, true);
  this.travel(ast.value);
  this.appendKeyword(')');
}
Sql.prototype.travelPartitions = function (ast) {
  this.appendKeyword('partition');
  this.appendKeyword('(', false, true);
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
  this.appendKeyword(')');
}
Sql.prototype.travelForOptIndexHint = function (ast) {
  this.appendKeyword('for');
  this.appendKeyword(ast.value);
}
Sql.prototype.travelIndexList = function (ast) {
  var list = ast.value;
  for (var i = 0; i < list.length; i++) {
    this.travel(list[i]);
    if (i !== list.length - 1) {
      this.append(',', true);
    }
  }
}
Sql.prototype.travelUseIndexHint = function (ast) {
  this.appendKeyword('use');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelIgnoreIndexHint = function (ast) {
  this.appendKeyword('ignore');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelForceIndexHint = function (ast) {
  this.appendKeyword('force');
  this.appendKeyword(ast.indexOrKey);
  if (ast.forOpt) {
    this.travel(ast.forOpt);
  }
  this.appendKeyword('(', false, true);
  if (ast.value) {
    this.travel(ast.value);
  }
  this.appendKeyword(')');
}
Sql.prototype.travelTableFactor = function (ast) {
  this.travel(ast.value);
  if (ast.partition) {
    this.travel(ast.partition);
  }
  if (ast.alias) {
    if (ast.hasAs) {
      this.appendKeyword('as');
    }
    this.travel(ast.alias);
  }
  if (ast.indexHintOpt) {
    this.travel(ast.indexHintOpt);
  }
}
var root = this
// AMD / RequireJS
if (typeof define !== 'undefined' && define.amd) {
    define([], function () {
        return sqlParser;
    });
}
// Node.js
else if (typeof module !== 'undefined' && module.exports) {
    module.exports = sqlParser;
}
// included directly via <script> tag
else {
    root.sqlParser = sqlParser;
}

